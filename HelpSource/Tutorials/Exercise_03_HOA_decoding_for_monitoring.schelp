title:: HOA Tutorial Exercise 03
summary:: Listening (headphone decoding) of b-format soundfiles.
categories:: Libraries>HOA
related:: Guides/HOAguide, Tutorials/HOA_Tutorial_Overview

STRONG:: Previous:::
link::Tutorials/Exercise_02_HOA_converting_SN3D_N3D_FuMa::

STRONG:: Next:::
link::Tutorials/Exercise_04_HOA_plane_versus_spherical_waves::

Having mostly looked at HOA B-format multichannel signals so far, this exercise is about listening to them.
To this end, the HOA library provides 3 different spherical decoders based on Lebedev grids.

HOADecLebedev50

The basic decoder (mode-matching) for Lebedev grid with 50 nodes, is working up to order 5 [1].
Possibility to choose with or without near-field compensation [2].

[1] Lecomte, P., Gauthier, P.-A., Langrenne, C., Garcia, A., & Berry, A. (2015). On the use of a Lebedev grid for Ambisonics. In Audio Engineering Society Convention 139. New York.

[2] Lecomte, P., & Gauthier, P.-A. (2015). Real-Time 3D Ambisonics using Faust, Processing, Pure Data, And OSC. In 15th International Conference on Digital Audio Effects (DAFx-15). Trondheim, Norway.

Lebedev Grids link:: https://en.wikipedia.org/wiki/Lebedev_quadrature::. are equidistant points on a sphere, in the case of a decoder they correspond to virtual speaker positions. Each signal of the virtual speakers is then convolved with corresponding HRIR kernels to yield two headphone signals.



Further down you also find a HOA binaural decoder that implements symetrized KU100 IRs.

HOABinaural

They were created using KU100 HRIR measurements presented in [1] and the rendering approach proposed in [2].

[1] Bernsch√ºtz, Benjamin. "A Spherical Far Field HRIR/HRTF Compilation of the Neumann KU 100", Proceedings of the 40th Italian (AIA) Annual Conference on Acoustics and the 39th German Annual Conference on Acoustics (DAGA) Conference on Acoustics. 2013. http://audiogroup.web.th-koeln.de/ku100hrir.html
[2] Schoerkhuber, Christian; Zaunschirm, Markus; Hoeldrich, Robert. "Binaural Rendering of Ambisonic Signals via Magnitude Least Squares", Fortschritte der Akustik, DAGA, 2018

For the  headphone correction filters:
The impulse responses were created by Benjamin Bernschuetz.
[1] Bernschuetz, B. (2013. A Spherical Far Field HRIR/HRTF Compilation of the Neumann KU 100.
AIA-DAGA 2013 Merano. http://audiogroup.web.th-koeln.de/ku100hrir.html


The examples below show how to monitor the playback of HOA b-format via headphones.

In case you have not done so yet: let's start the sound server, which we configure first to get more audio buses and 36 output channels

code::
s.quit; // quit the server first if it is still running
(
ServerOptions.devices;
s = Server.local;
Server.local = Server.default;
o = Server.local.options; // Get the local server's options
o.numInputBusChannels = 2; // Set Input to number of Inputs
o.numOutputBusChannels = 36; // lets start after chan 36 so as not to see the mic input
o.numAudioBusChannels = 1024 * 2; // default is 1024
o.blockSize = 512;
o.numWireBufs = 64 * 16;  // for more complex SynthDefs
o.memSize = 2.pow(16);  // default 2.pow(13)
o.sampleRate = 48000;
s.makeWindow;
s.boot;
)
::

Start the oscilloscope showing all the channels for the selected order of the b-format.

code::
(
~order = 4;
~hoaNumChannels = (~order+1).pow(2);
s.scope(~hoaNumChannels);
)
::

Let's make a node that generates a HOA signal ( white noise ) control the direction with the mouse.
we won't see it since we don't monitor it.

code::
(
~hoaSignal = NodeProxy.new(s, \audio, ~hoaNumChannels);
~hoaSignal.source = {HOAEncoder.ar(~order, WhiteNoise.ar(1), MouseX.kr(pi, -pi), MouseY.kr(-pi * 0.5, pi * 0.5 ) )};
~hoaSignal.fadeTime = 1;
)
::

Now let's make a node that can take in (multichannel) HOA signals.

code::
(
~decoder = NodeProxy.new(s, \audio, 26);
~decoder.source = {var in; in = \in.ar(0!(~hoaNumChannels)); in};
~decoder.fadeTime = 1;
~decoder.play(0, 26);
)
::

Still we don't see anything yet in the scope because ~hoaSignal  and ~decoder are not connected yet.

code::
~hoaSignal <>> ~decoder; // watch the oscilloscope
::

Now you see in the scope the B-format from ~hoaSignal going untransformed through ~decoder.
Here is where the advantages of proxyspace with Ambisonics come is handy.
Lets change the  NodeProxies one step at a time. First the ~hoaSignal itself:

code::
// standing sinewave
~hoaSignal.source = {HOAEncoder.ar(~order, SinOsc.ar(48000 / 1024), MouseX.kr(-pi, pi), MouseY.kr(-pi * 0.5, pi * 0.5) )};
// White noise
~hoaSignal.source = {HOAEncoder.ar(~order, WhiteNoise.ar(1), MouseX.kr(-pi, pi), MouseY.kr(-pi * 0.5, pi * 0.5) )};
::

Then the decoder, first we decode into a Lebedev Grid with 26 positions, which is enough points for order 3:
code::
s.scope(26); // To see all channels we add one more to the oscilloscope
~decoder.source = {var in; in = \in.ar(0!~hoaNumChannels); HOADecLebedev26.ar(3, in, output_gains: 24) };
::

Now let's load HRIR filters for each of the 26 channels. You can find these filters inside the teletype::resource/:: directory.

code::
HOA.openResourceDir
::

To load the HRIR filters, execute the following:

code::
HOADecLebedev26.loadHrirFilters(s);
HOADecLebedev26.hrirFilters.size;

~decoderOrder = 2; // let's reduce the order
~decoderNumChannels = (~decoderOrder+1).pow(2);
// and change the decoder.source again
~decoder.source = {var in; in = \in.ar(0!~decoderNumChannels); HOADecLebedev26.ar(~decoderOrder, in, hrir_Filters:1) };
::

This is likely quite heavy on the CPU, because it means 26 * 2 convolutions with an FFT.
For monitoring purposes you might want to listen to the first order, for which you can use HOADecLebedev06.
which results in 12 FFT convolutions.

code::
HOADecLebedev06.loadHrirFilters(s);
HOADecLebedev06.hrirFilters.size;

~decoderOrder = 1; // let's reduce the order
~decoderNumChannels = (~decoderOrder+1).pow(2);
~decoder.source = {var in; in = \in.ar(0!~decoderNumChannels); HOADecLebedev06.ar(~decoderOrder, in, hrir_Filters:1) };
// for 1st order take only 4 \in channels and set the first argument of HOADecLebedev06 (order) to 1.
::

Now you might want to change the HOA signal again to hear something. Watch the phase and amplitude shifts.
code::
~hoaSignal.source = {HOAEncoder.ar(~order, SinOsc.ar(48000 / 64), MouseX.kr(-pi, pi), MouseY.kr(-pi * 0.5, pi * 0.5) )};
~hoaSignal.source = {HOAEncoder.ar(~order, WhiteNoise.ar(1), MouseX.kr(-pi, pi), MouseY.kr(-pi * 0.5, pi * 0.5) )};
::


The previous binauralization examples are CPU costly but can in principle use personalized HRIRs, should you happen to have some measurements for the positions of Lebedev grids.
There is another possibility to binauralize b-format For, which is a very efficient and takes advantage of the symmetry of the KU100 see the following example:

Load the IRs as well as the headphone correction filters
code::
(
s.scope(40);
Buffer.freeAll;
HOABinaural.loadbinauralIRs(s);
HOABinaural.loadHeadphoneCorrections(s);
HOABinaural.binauralIRs;
HOABinaural.headPhoneIRs;

HOABinaural.listHeadphones;

~headphoneModel = 4;

// set to nil if you want no correction
//~headphoneModel = nil;
)
::

Initilaize the binaural decoder and feed it with 3 noise sources
code::
(
{OffsetOut.ar(0, HOABinaural.ar(5, In.ar(2, 36), headphoneCorrection:~headphoneModel) * 1 )}.play;

{ Out.ar(2, HOAEncoder.ar(5, PinkNoise.ar(0.1),
	                      SinOsc.ar(0.1, 0, pi * 0.999 ),
	                      SinOsc.ar(0.2, 0, pi * 0.999 * 0.4 )
		                  ) +
HOAEncoder.ar(5, WhiteNoise.ar(0.05),
	                      SinOsc.ar(0.11, 0, pi * 0.999 ),
	                      SinOsc.ar(0.22, 0, pi * 0.999 * 0.4 )
		                  ) +
HOAEncoder.ar(5, BrownNoise.ar(0.2),
	                      SinOsc.ar(0.12, 0, pi * 0.999 ),
	                      SinOsc.ar(0.23, 0, pi * 0.999 * 0.4 )
		                  )
) }.play;

)
::


You can use HOABinaural in combination with the HOAEncLebedev50 in order to listen to VBAP spatializations:

First extract the Lebedev nodes grid positions (azimuth and elevation), pack them in pairs and convert them to degrees.
Use these positions as speaker positions in your VBAP array.

code::
a = VBAPSpeakerArray.new(3, HOAEncLebedev50.grid.flop.raddeg); // zig zag partial dome
// the next command might take a while for 50 speaker positions.
b = Buffer.loadCollection(s, a.getSetsAndMatrices);
::


code::
// watch the scope window for you binaural results
s.scope(2);

// we also need this for comparison
Lebedev50BinauralDecoder.loadHrirFilters(s);

::

Now encode a Noise source over VBAP with the Lebedev speaker positions and feed this 50 channels into the HOAEncLebedev50 e.g. for the 5th order.
Then, binauralize the resulting b-format.

code::
(
x = { |azi = 0, ele = 0, spr = 0|
var source, lbedev50, order5Sig ;
source = PinkNoise.ar(10);
// source = SinOsc.ar(440.0);
lbedev50 = VBAP.ar(50, source, b.bufnum, MouseX.kr(-180, 180), MouseY.kr(-90, 90), spr);
order5Sig = HOAEncLebedev50.ar(5, 	lbedev50, gain: 0, filters:0);

HOABinaural.ar(5, order5Sig, headphoneCorrection: nil);

}.play;
)

// you might want to play with the VBAP spread

x.set(\spr, 5)
x.set(\spr, 10)
x.set(\spr, 15)
x.set(\spr, 20)
x.set(\spr, 25)
x.set(\spr, 50)
::


This one is just for comparison with the hard coded Lebedev50BinauralDecoder (in case you have it on your system).

code::
(
x = { |azi = 0, ele = 0, spr = 0|
var source, lbedev50, order5Sig ;
source = PinkNoise.ar(10);
// source = SinOsc.ar(440.0);
lbedev50 = VBAP.ar(50, source, b.bufnum, MouseX.kr(180, -180), MouseY.kr(-90, 90), spr);

Lebedev50BinauralDecoder.ar(lbedev50 * 0.1);

}.play;
)
::





STRONG:: Previous:::
link::Tutorials/Exercise_02_HOA_converting_SN3D_N3D_FuMa::

STRONG:: Next:::
link::Tutorials/Exercise_04_HOA_plane_versus_spherical_waves::
